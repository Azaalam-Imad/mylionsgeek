<?php

namespace App\Http\Controllers;

use App\Models\Formation;
use Inertia\Inertia;
use App\Http\Controllers\Controller;
use App\Mail\CompleteUserProfile;
use App\Models\User;
use Illuminate\Support\Str;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Mail;

class UsersController extends Controller
{
    public function index()
    {
        $allUsers = User::orderBy('created_at', 'desc')->get();
        $allFormation = Formation::orderBy('created_at', 'desc')->get();


        return Inertia::render(
            'admin/users/index',
            [
                'users' => $allUsers,
                'trainings' => $allFormation
            ]
        );
    }

    //! store function
    // public function store(Request $request)
    // {
    //     $validated = $request->validate([
    //         'id' => 'required|uuid', // Typically generated by backend
    //         'name' => 'nullable|string|max:255',
    //         'email' => 'nullable|string|email|max:255|unique:users,email',
    //         'password' => 'nullable|string|min:8|confirmed', // expects password_confirmation
    //         'phone' => 'nullable|string|max:20',
    //         'image' => 'nullable|image|mimes:jpeg,png,jpg,gif,svg|max:2048', // Or 'nullable|string' if not a file
    //         'status' => 'nullable|string', // adjust allowed values as needed
    //         'cin' => 'nullable|string|max:20', // National ID, if applicable
    //         'formation_id' => 'nullable|uuid|exists:formations,id', // Assumes foreign key to formations table
    //         'account_state' => 'nullable|integer|in:0,1', // Assumes foreign key to formations table
    //         'access_studio' => 'nullable|integer|in:0,1', // Assumes foreign key to formations table
    //         'access_cowork' => 'nullable|integer|in:0,1', // Assumes foreign key to formations table
    //         'role' => 'nullable|string', // Assumes foreign key to formations table
    //         'entreprise' => 'nullable|string', // Assumes foreign key to formations table
    //     ]);
    //     $existing = User::query()->where('email', $validated['email'])->first();
    //     if ($existing) {
    //         return response()->json([
    //             'status' => 'exists',
    //             'validated' => $existing,
    //         ]);
    //     }
    //     if ($request->hasFile('image')) {
    //         $path = $request->file('image')->store('users', 'public');
    //         $validated['image'] = '/storage/' . $path;
    //     }
    //     $plainPassword = Str::random(12);
    //     $user = User::create([
    //         'id' => (string) Str::uuid(),
    //         'name' => $validated['name'],
    //         'email' => $validated['email'],
    //         'password' => Hash::make($plainPassword),
    //         'phone' => $validated['phone'],
    //         'image' => $validated['image'],
    //         'status' => $validated['status'],
    //         'cin' => $validated['cin'],
    //         'formation_id' => $validated['formation_id'],
    //         'account_state' => $validated['account_state'],
    //         'access_studio' => $validated['access_studio'],
    //         'access_cowork' => $validated['access_cowork'],
    //         'role' => $validated['role'],
    //         'entreprise' => $validated['entreprise'],
    //         'remember_token' => null,
    //         'email_verified_at' => null,
    //     ]);
    //     Mail::to($user->email)->queue(new CompleteUserProfile($user, $plainPassword));
    //     return response()->json([
    //         'status' => 'created',
    //         'validated' => $user,
    //     ]);
    // }


    //! edit sunction
    public function show(User $user)
    {
        // dd($user->id);
        $user = User::where('id', $user->id);
        $allFormation = Formation::orderBy('created_at', 'desc')->get();

        return Inertia::render('admin/users/[id]', [
            'user' => $user,
            'trainings' => $allFormation,
        ]);
    }
    public function update(Request $request, User $user)
    {

        // dd($request->all());
        $validated = $request->validate([
            'name' => 'nullable|string|max:255',
            'email' => 'nullable|email|max:255|unique:users,email,' . $user->id,
            'role' => 'nullable|string|max:100',
            'status' => 'nullable|string|max:100',
            'formation_id' => 'nullable|integer|exists:formations,id',
            'phone' => 'nullable|string|max:15',
            'cin' => 'nullable|string|max:100',
            'image' => 'nullable|image|max:2048',
        ]);

        if ($request->hasFile('image')) {
            $path = $request->file('image')->store('users', 'public');
            $validated['image'] = '/storage/' . $path;
        }

        $user->update($validated);

        return redirect()->back()->with('success', 'User updated successfully');
    }
    public function updateAccountStatus(Request $request, User $user)
    {
        $validated = $request->validate([
            'account_state' => 'required|integer|in:0,1'
        ]);

        $user->update([
            'account_state' => $validated['account_state'],
        ]);
        // dd($user->account_state , $request->account_state);

        return redirect()->back()->with('success', 'User account status updated successfully');
    }
}
